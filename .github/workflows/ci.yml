name: CI Pipeline

on:
  push:
    branches: [main, develop, improved-password-handling]
  pull_request:
    branches: [main, develop]
    # Also trigger when PRs are made TO the improved-password-handling branch
  workflow_dispatch:
    # Allow manual triggering from any branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      users_db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: users_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      auth_db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: auth_db
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd mysql-client

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Wait for databases and create test databases
        run: |
          echo "Waiting for users_db..."
          while ! nc -z localhost 3306; do
            sleep 1
          done
          echo "users_db is up"

          echo "Waiting for auth_db..."
          while ! nc -z localhost 3307; do
            sleep 1
          done
          echo "auth_db is up"

          # Create test databases with explicit TCP connection
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password --protocol=TCP -e "CREATE DATABASE IF NOT EXISTS test_users_db;" || echo "Database creation failed, will be created by app"
          mysql -h 127.0.0.1 -P 3307 -u root -proot_password --protocol=TCP -e "CREATE DATABASE IF NOT EXISTS test_auth_db;" || echo "Database creation failed, will be created by app"

      - name: Create test configuration and override app config
        run: |
          # Create a test-specific app configuration override
          cat > backend/test_config.py << 'EOF'
          import os
          import json

          # Override database configurations for testing
          SQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI', 
              'mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db')

          binds_str = os.environ.get('SQLALCHEMY_BINDS', '{}')
          SQLALCHEMY_BINDS = json.loads(binds_str) if binds_str else {
              'users_db': 'mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db',
              'auth_db': 'mysql+pymysql://root:root_password@127.0.0.1:3307/test_auth_db'
          }

          SQLALCHEMY_TRACK_MODIFICATIONS = False
          SECRET_KEY = os.environ.get('SECRET_KEY', 'test-key')
          TESTING = True
          EOF

          # Update the app initialization to use test config
          cat > backend/app/__init__.py << 'EOF'
          from flask import Flask
          from flask_sqlalchemy import SQLAlchemy
          from app.middleware.logging import SecurityLogger
          import os

          db = SQLAlchemy()

          def create_app():
              app = Flask(__name__)
              app.security_logger = SecurityLogger()
              
              # Use test config if in testing environment
              if os.environ.get('TESTING') == 'true':
                  app.config.from_pyfile('../test_config.py')
              else:
                  app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:root_password@users_db/users_db'
                  app.config['SQLALCHEMY_BINDS'] = {
                      'users_db': 'mysql+pymysql://root:root_password@users_db/users_db',
                      'auth_db': 'mysql+pymysql://root:root_password@auth_db/auth_db'
                  }
                  app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
                  app.config['SECRET_KEY'] = 'test-key'
              
              db.init_app(app)
              
              from app.routes.api import api_bp
              app.register_blueprint(api_bp, url_prefix='/api')
              
              with app.app_context():
                  db.create_all()
                  if not os.environ.get('TESTING'):
                      init_first_user(app)
                      
              return app

          def init_first_user(app):
              from app.models.user import User, UserRole
              from app.services.user_service import UserService
              
              if User.query.count() == 0:
                  user_service = UserService()
                  try:
                      user_service.create_user(
                          username='admin',
                          first_name='Admin',
                          last_name='User',
                          password='admin123',
                          adresse='123 Admin St',
                          num_phone='1234567890',
                          role=UserRole.admin
                      )
                      print("Premier utilisateur admin créé avec succès!")
                      print("Username: admin")
                      print("Password: admin123")
                  except Exception as e:
                      print(f"Erreur lors de la création du premier utilisateur : {str(e)}")
          EOF

      - name: Run tests
        env:
          SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db"
          SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db","auth_db":"mysql+pymysql://root:root_password@127.0.0.1:3307/test_auth_db"}'
          SECRET_KEY: "test-key"
          TESTING: "true"
        run: |
          cd backend
          # Update conftest.py to create admin user for each test
          cat > tests/conftest.py << 'EOF'
          import pytest
          from app import create_app, db
          from app.models.user import User, UserRole
          from app.services.user_service import UserService

          @pytest.fixture
          def app():
              app = create_app()
              app.config.update({
                  'TESTING': True,
              })
              
              with app.app_context():
                  db.create_all()
                  
                  # Create admin user for tests if it doesn't exist
                  if User.query.count() == 0:
                      user_service = UserService()
                      user_service.create_user(
                          username='admin',
                          first_name='Admin',
                          last_name='User',
                          password='admin123',
                          adresse='123 Admin St',
                          num_phone='1234567890',
                          role=UserRole.admin
                      )
                  
                  yield app
                  db.session.remove()
                  db.drop_all()

          @pytest.fixture
          def client(app):
              return app.test_client()

          @pytest.fixture
          def runner(app):
              return app.test_cli_runner()
          EOF

          python -m pytest tests/ -v

      - name: Run coverage
        env:
          SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db"
          SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@127.0.0.1:3306/test_users_db","auth_db":"mysql+pymysql://root:root_password@127.0.0.1:3307/test_auth_db"}'
          SECRET_KEY: "test-key"
          TESTING: "true"
        run: |
          cd backend
          # Use the same conftest.py for coverage
          python -m pytest tests/ --cov=app --cov-report=term-missing
