name: CI Pipeline

on:
  push:
    branches: [main, develop, improved-password-handling]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      users_db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: users_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      auth_db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: auth_db
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd mysql-client

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Wait for databases and create test databases
        run: |
          echo "Waiting for users_db..."
          while ! nc -z localhost 3306; do
            sleep 1
          done
          echo "users_db is up"

          echo "Waiting for auth_db..."
          while ! nc -z localhost 3307; do
            sleep 1
          done
          echo "auth_db is up"

          # Create test databases
          mysql -h localhost -P 3306 -u root -proot_password -e "CREATE DATABASE IF NOT EXISTS test_users_db;"
          mysql -h localhost -P 3307 -u root -proot_password -e "CREATE DATABASE IF NOT EXISTS test_auth_db;"

      - name: Run tests
        env:
          SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@localhost:3306/test_users_db"
          SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@localhost:3306/test_users_db","auth_db":"mysql+pymysql://root:root_password@localhost:3307/test_auth_db"}'
          SECRET_KEY: "test-key"
          TESTING: "true"
        run: |
          python -m pytest backend/tests/ -v

      - name: Run coverage
        env:
          SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@localhost:3306/test_users_db"
          SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@localhost:3306/test_users_db","auth_db":"mysql+pymysql://root:root_password@localhost:3307/test_auth_db"}'
          SECRET_KEY: "test-key"
          TESTING: "true"
        run: |
          python -m pytest backend/tests/ --cov=app --cov-report=term-missing --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
