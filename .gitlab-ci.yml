image: python:3.9-slim

stages:
  - test
  - deploy

variables:
  MYSQL_ROOT_PASSWORD: root_password
  MYSQL_DATABASE: test_db

services:
  - alias: users_db
    name: mysql:5.7
    command:
      [
        "mysqld",
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
      ]
    variables:
      MYSQL_DATABASE: users_db
      MYSQL_ROOT_PASSWORD: root_password

  - alias: auth_db
    name: mysql:5.7
    command:
      [
        "mysqld",
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
      ]
    variables:
      MYSQL_DATABASE: auth_db
      MYSQL_ROOT_PASSWORD: root_password

.before_script_template: &before_script_definition
  before_script:
    # Install dependencies
    - apt-get update || (echo "Retrying with sudo..." && sudo apt-get update)
    - apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd || sudo apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd
    - pip install -r backend/requirements.txt
    - pip install pytest pytest-cov
    # Debug networking
    - echo "Testing connection to users_db"
    - getent hosts users_db || echo "users_db not found in hosts"
    - echo "Testing connection to auth_db"
    - getent hosts auth_db || echo "auth_db not found in hosts"
    # Wait for databases with timeout
    - |
      timeout=30
      echo "Waiting up to ${timeout}s for users_db..."
      for i in $(seq 1 $timeout); do
        if nc -z users_db 3306; then
          echo "users_db is up!"
          break
        fi
        if [ $i -eq $timeout ]; then
          echo "Timeout waiting for users_db"
          exit 1
        fi
        echo -n "."
        sleep 1
      done
    - |
      timeout=30
      echo "Waiting up to ${timeout}s for auth_db..."
      for i in $(seq 1 $timeout); do
        if nc -z auth_db 3306; then
          echo "auth_db is up!"
          break
        fi
        if [ $i -eq $timeout ]; then
          echo "Timeout waiting for auth_db"
          exit 1
        fi
        echo -n "."
        sleep 1
      done

test_app:
  stage: test
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@users_db:3306/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@users_db:3306/users_db","auth_db":"mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@auth_db:3306/auth_db"}'
    SECRET_KEY: "test-key"
  <<: *before_script_definition
  script:
    - python -m pytest backend/tests/ -v

coverage:
  stage: test
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@users_db:3306/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@users_db:3306/users_db","auth_db":"mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@auth_db:3306/auth_db"}'
    SECRET_KEY: "test-key"
  <<: *before_script_definition
  script:
    - python -m pytest backend/tests/ --cov=app --cov-report=term-missing
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"

deploy:
  stage: deploy
  tags:
    - shell
  script:
    - cd backend
    - docker-compose -f docker-compose.yml down --remove-orphans
    - docker-compose -f docker-compose.yml up -d --build
  when: manual
