stages:
  - test
  - deploy

variables:
  MYSQL_ROOT_PASSWORD: root_password

test_app:
  stage: test
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@localhost:3307/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@localhost:3307/users_db","auth_db":"mysql+pymysql://root:root_password@localhost:3308/auth_db"}'
    SECRET_KEY: "test-key"
  before_script:
    - sudo apt-get update
    - sudo apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd python3-pip
    - sudo pip3 install -r backend/requirements.txt
    - sudo pip3 install pytest pytest-cov
    # Wait for MySQL on port 3307
    - |
      echo "Waiting for users_db..."
      while ! nc -z localhost 3307; do
        sleep 1
      done
      echo "users_db is up"
    # Wait for MySQL on port 3308
    - |
      echo "Waiting for auth_db..."
      while ! nc -z localhost 3308; do
        sleep 1
      done
      echo "auth_db is up"
  script:
    - python -m pytest backend/tests/ -v

coverage:
  stage: test
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@localhost:3307/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@localhost:3307/users_db","auth_db":"mysql+pymysql://root:root_password@localhost:3308/auth_db"}'
    SECRET_KEY: "test-key"
  before_script:
    - sudo apt-get update
    - sudo apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd python3-pip
    - sudo pip3 install -r backend/requirements.txt
    - sudo pip3 install pytest pytest-cov
    # Wait for MySQL on port 3307
    - |
      echo "Waiting for users_db..."
      while ! nc -z localhost 3307; do
        sleep 1
      done
      echo "users_db is up"
    # Wait for MySQL on port 3308
    - |
      echo "Waiting for auth_db..."
      while ! nc -z localhost 3308; do
        sleep 1
      done
      echo "auth_db is up"
  script:
    - python -m pytest backend/tests/ --cov=app --cov-report=term-missing
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"

deploy:
  stage: deploy
  tags:
    - shell
  script:
    - cd backend
    - docker-compose -f docker-compose.yml down --remove-orphans
    - docker-compose -f docker-compose.yml up -d --build
  when: manual
