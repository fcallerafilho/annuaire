image: python:3.9-slim

stages:
  - test
  - deploy

variables:
  MYSQL_ROOT_PASSWORD: root_password

services:
  - name: mysql:5.7
    alias: mysql-users
    variables:
      MYSQL_DATABASE: users_db
      MYSQL_ROOT_PASSWORD: root_password

  - name: mysql:5.7
    alias: mysql-auth
    variables:
      MYSQL_DATABASE: auth_db
      MYSQL_ROOT_PASSWORD: root_password

.before_script_template: &before_script_definition
  before_script:
    - echo "Starting setup..."
    # Install dependencies
    - apt-get update && apt-get install -y default-libmysqlclient-dev build-essential netcat-openbsd sudo
    - pip install -r backend/requirements.txt
    - pip install pytest pytest-cov
    # Debug networking
    - echo "Checking service environment variables..."
    - env | grep MYSQL
    # Add entries to /etc/hosts with sudo
    - sudo bash -c 'echo "127.0.0.1 mysql-users" >> /etc/hosts'
    - sudo bash -c 'echo "127.0.0.1 mysql-auth" >> /etc/hosts'
    # Wait for MySQL services
    - |
      echo "Waiting for MySQL services..."
      for i in {1..30}; do
        if nc -z mysql-users 3307 && nc -z mysql-auth 3308; then
          echo "MySQL services are up!"
          break
        fi
        echo "Waiting for MySQL services... attempt $i"
        sleep 2
      done

test_app:
  stage: test
  tags:
    - shell
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@mysql-users:3307/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@mysql-users:3307/users_db","auth_db":"mysql+pymysql://root:root_password@mysql-auth:3308/auth_db"}'
    SECRET_KEY: "test-key"
  <<: *before_script_definition
  script:
    - echo "Running tests..."
    - python -m pytest backend/tests/ -v

coverage:
  stage: test
  tags:
    - shell
  variables:
    SQLALCHEMY_DATABASE_URI: "mysql+pymysql://root:root_password@mysql-users:3307/users_db"
    SQLALCHEMY_BINDS: '{"users_db":"mysql+pymysql://root:root_password@mysql-users:3307/users_db","auth_db":"mysql+pymysql://root:root_password@mysql-auth:3308/auth_db"}'
    SECRET_KEY: "test-key"
  <<: *before_script_definition
  script:
    - echo "Running coverage tests..."
    - python -m pytest backend/tests/ --cov=app --cov-report=term-missing
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"

deploy:
  stage: deploy
  tags:
    - shell
  script:
    - cd backend
    - docker-compose -f docker-compose.yml down --remove-orphans
    - docker-compose -f docker-compose.yml up -d --build
  when: manual
