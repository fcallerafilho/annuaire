stages:
  - test

# Define a template for the test environment
.test_template: &test_template
  image: python:3.7-slim
  services:
    - mysql:5.7
  variables:
    MYSQL_ROOT_PASSWORD: root_password
    MYSQL_DATABASE: test_db
    SECRET_KEY: 'test-key'
    USERS_DB_HOST: mysql
    AUTH_DB_HOST: mysql
  # Change working directory to backend
  before_script:
    - cd backend
    - apt-get update && apt-get install -y 
        default-libmysqlclient-dev 
        build-essential 
        python3-dev 
        default-mysql-client
    - pip install --no-cache-dir -r requirements.txt
    - pip install pytest pytest-cov
    - |
      # Wait for MySQL to be ready
      for i in $(seq 1 20); do
        mysql -h "$USERS_DB_HOST" -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT 1" >/dev/null 2>&1 && 
        mysql -h "$AUTH_DB_HOST" -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT 1" >/dev/null 2>&1 && 
        break
        sleep 5
      done

# Run unit tests
unit_tests:
  stage: test
  <<: *test_template
  script:
    - mkdir -p test-reports
    - pytest 
        --cov=. 
        --cov-report=xml:test-reports/coverage.xml 
        --cov-report=html:test-reports/coverage-html 
        --junitxml=test-reports/junit.xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/test-reports/coverage.xml
      junit: backend/test-reports/junit.xml
    paths:
      - backend/test-reports/

# Integration tests with databases
integration_tests:
  stage: test
  <<: *test_template
  services:
    - name: mysql:5.7
      alias: users_db
    - name: mysql:5.7
      alias: auth_db
  variables:
    USERS_DB_HOST: users_db
    AUTH_DB_HOST: auth_db
  script:
    - pytest tests/integration
  
# Performance and security checks
performance_checks:
  stage: test
  <<: *test_template
  script:
    - pip install bandit safety
    - bandit -r .
    - safety check

# Optional Docker build verification
docker_build_test:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -f backend/Dockerfile -t test-backend backend
    - docker run --rm test-backend python -c "import sys; print(sys.version)"