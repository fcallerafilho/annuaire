stages:
  - test

# Define a template for the test environment
.test_template: &test_template
  image: python:3.7-slim
  services:
    - name: mysql:5.7
      alias: users_db
    - name: mysql:5.7
      alias: auth_db
  variables:
    MYSQL_ROOT_PASSWORD: root_password
    MYSQL_DATABASE: users_db
    MYSQL_USER: root
    SECRET_KEY: 'test-key'

  # Change working directory to backend
  before_script:
    - cd backend
    - apt-get update && apt-get install -y 
        default-libmysqlclient-dev 
        build-essential 
        python3-dev 
        default-mysql-client
    - pip install --no-cache-dir -r requirements.txt
    - pip install pytest pytest-cov pymysql
    - |
      # Wait for MySQL to be ready
      apt-get install -y netcat-openbsd
      for service in users_db auth_db; do
        max_attempts=30
        attempt=0
        while ! nc -z "$service" 3306; do
          attempt=$((attempt+1))
          if [ $attempt -ge $max_attempts ]; then
            echo "Error: $service not ready after $max_attempts attempts"
            exit 1
          fi
          echo "Waiting for $service to be ready... (Attempt $attempt)"
          sleep 2
        done
        echo "$service is ready"
      done

# Run unit tests
unit_tests:
  stage: test
  <<: *test_template
  script:
    - mkdir -p test-reports
    - |
      # Modify the database connection configuration for testing
      sed -i "s|'mysql+pymysql://root:root_password@users_db/users_db'|'mysql+pymysql://root:root_password@127.0.0.1/users_db'|g" app/__init__.py
      sed -i "s|'users_db': 'mysql+pymysql://root:root_password@users_db/users_db'|'users_db': 'mysql+pymysql://root:root_password@127.0.0.1/users_db'|g" app/__init__.py
      sed -i "s|'auth_db': 'mysql+pymysql://root:root_password@auth_db/auth_db'|'auth_db': 'mysql+pymysql://root:root_password@127.0.0.1/auth_db'|g" app/__init__.py
    - PYTHONPATH=. pytest 
        --cov=. 
        --cov-report=xml:test-reports/coverage.xml 
        --cov-report=html:test-reports/coverage-html 
        --junitxml=test-reports/junit.xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/test-reports/coverage.xml
      junit: backend/test-reports/junit.xml
    paths:
      - backend/test-reports/

# Integration tests with databases
integration_tests:
  stage: test
  <<: *test_template
  script:
    - |
      # Modify the database connection configuration for testing
      sed -i "s|'mysql+pymysql://root:root_password@users_db/users_db'|'mysql+pymysql://root:root_password@127.0.0.1/users_db'|g" app/__init__.py
      sed -i "s|'users_db': 'mysql+pymysql://root:root_password@users_db/users_db'|'users_db': 'mysql+pymysql://root:root_password@127.0.0.1/users_db'|g" app/__init__.py
      sed -i "s|'auth_db': 'mysql+pymysql://root:root_password@auth_db/auth_db'|'auth_db': 'mysql+pymysql://root:root_password@127.0.0.1/auth_db'|g" app/__init__.py
    - PYTHONPATH=. pytest tests/integration
  
# Performance and security checks
performance_checks:
  stage: test
  <<: *test_template
  script:
    - pip install bandit safety
    - bandit -r .
    - safety check

# Optional Docker build verification
docker_build_test:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -f backend/Dockerfile -t test-backend backend
    - docker run --rm test-backend python -c "import sys; print(sys.version)"